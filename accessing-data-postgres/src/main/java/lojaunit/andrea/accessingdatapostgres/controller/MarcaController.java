package lojaunit.andrea.accessingdatapostgres.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import lojaunit.andrea.accessingdatapostgres.model.Marca;
import lojaunit.andrea.accessingdatapostgres.repository.MarcaRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/marca") // This means URL's start with /demo (after Application path)

public class MarcaController {

  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private MarcaRepository marcaRepository;


  @PostMapping// Map ONLY POST Requests
  public @ResponseBody String addNewMarca (@RequestBody Marca marca) {
	  
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    marcaRepository.save(marca);
    return "Salvo";
        
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Marca> getAllMarcas() {
    // This returns a JSON or XML with the users
    return marcaRepository.findAll();
  }
  @GetMapping(path="/find/{id}")
  public @ResponseBody Optional<Marca> findById(@RequestParam Integer idMarca) {
    // This returns a JSON or XML with this user
    return marcaRepository.findById(idMarca);
  }
  @DeleteMapping(path="/delete/{id}")
  @ResponseStatus (code = HttpStatus.ACCEPTED)
  public @ResponseBody String deleteById(@PathVariable Integer id) {
    // This returns a JSON or XML with this user
	  
	  if (marcaRepository.findById(id) == null) {
		  return "Não encontrado";
	  }
	  marcaRepository.deleteById(id);
	  return "Removido";
	  }
  @PutMapping(path="/update/{id}")
  public @ResponseBody String PutById(@PathVariable Integer id, @RequestBody Marca marca) {
    // This returns a JSON or XML with this user
	  
	  if (marcaRepository.findById(id) == null) {
		  return "Não encontrado";
	  }
	  
	  Marca n = marcaRepository.findById(id).get();
	    n.setNome(marca.getNome());
	    n.setDescricao(marca.getDescricao());
	      
	    marcaRepository.save(n);
	    return "Saved";
	        
  }
}
