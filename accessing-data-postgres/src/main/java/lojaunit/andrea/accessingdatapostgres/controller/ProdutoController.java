package lojaunit.andrea.accessingdatapostgres.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import lojaunit.andrea.accessingdatapostgres.model.Produto;
import lojaunit.andrea.accessingdatapostgres.repository.ProdutoRepository;

@Controller // This means that this class is a Controller
@RequestMapping(path="/produto") // This means URL's start with /demo (after Application path)
public class ProdutoController {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ProdutoRepository produtoRepository;


	@PostMapping// Map ONLY POST Requests
	public @ResponseBody String addNewProduto (@RequestBody Produto produto) {

		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		produtoRepository.save(produto);
		return "Salvo";

	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Produto> getAllProdutos() {
		// This returns a JSON or XML with the users
		return produtoRepository.findAll();
	}
	@GetMapping(path="/find/{id}")
	public @ResponseBody Optional<Produto> findById(@RequestParam Integer idProduto) {
		// This returns a JSON or XML with this user
		return produtoRepository.findById(idProduto);
	}
	@DeleteMapping(path="/delete/{id}")
	@ResponseStatus (code = HttpStatus.ACCEPTED)
	public @ResponseBody String deleteById(@PathVariable Integer id) {
		// This returns a JSON or XML with this user

		if (produtoRepository.findById(id) == null) {
			return "Não encontrado";
		}
		produtoRepository.deleteById(id);
		return "Removido";
	}
	@PutMapping(path="/update/{id}")
	public @ResponseBody String PutById(@PathVariable Integer id, @RequestBody Produto produto) {
		// This returns a JSON or XML with this user

		if (produtoRepository.findById(id) == null) {
			return "Não encontrado";
		}
		
		Produto n = produtoRepository.findById(id).get();
		n.setNome(produto.getNome());
		n.setDescricao(produto.getDescricao());
		n.setPreco_unitario(produto.getPreco_unitario());
		n.setUnidade(produto.getUnidade());

		produtoRepository.save(n);
		return "Saved";

	}

}
